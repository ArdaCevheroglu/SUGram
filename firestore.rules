rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if the requesting user is the owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check if a value exists and isn't empty
    function isNotEmpty(value) {
      return value != null && value != '';
    }
    
    // Check if the current timestamp is valid
    function isValidTimestamp(timestamp) {
      return timestamp != null && timestamp.toMillis() <= request.time.toMillis();
    }
    
    // User Collection Rules
    match /users/{userId} {
      // Allow reading public user profiles
      allow read: if isAuthenticated();
      
      // Allow user to write only their own document
      allow create: if isOwner(userId) && 
                      isNotEmpty(request.resource.data.username) && 
                      isNotEmpty(request.resource.data.email);
                      
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
      
      // Additional rules for nested collections
      match /private/{document=**} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Posts Collection Rules
    match /posts/{postId} {
      // Anyone can read posts
      allow read: if isAuthenticated();
      
      // Allow create with valid fields and ownership
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid &&
                      isNotEmpty(request.resource.data.imageUrl) &&
                      isValidTimestamp(request.resource.data.createdAt);
      
      // Allow update for post owners and limited fields for others (likes)
      allow update: if isOwner(resource.data.userId) || 
                      (isAuthenticated() && 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'comments']));
      
      // Only post owner can delete
      allow delete: if isOwner(resource.data.userId);
    }
    
    // Comments Collection (if separate)
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid &&
                      isNotEmpty(request.resource.data.text);
      allow update, delete: if isOwner(resource.data.userId);
    }
    
    // Messages Collection
    match /messages/{messageId} {
      // Only sender and recipient can read messages
      allow read: if isAuthenticated() && 
                   (request.auth.uid == resource.data.senderId || 
                    request.auth.uid == resource.data.receiverId);
      
      // Only authenticated users can create messages
      allow create: if isAuthenticated() && 
                     request.resource.data.senderId == request.auth.uid;
      
      // Only sender can update or delete
      allow update, delete: if isOwner(resource.data.senderId);
    }
    
    // Events Collection
    match /events/{eventId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                     request.resource.data.createdBy == request.auth.uid;
      allow update: if isOwner(resource.data.createdBy);
      allow delete: if isOwner(resource.data.createdBy);
    }
    
    // Notifications Collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
                   request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
                             request.auth.uid == resource.data.userId;
    }
  }
}